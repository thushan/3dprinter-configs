# ____ _  _ _    ___  _  _ ___  __     ____ ____ ____ __   ___  __   ___  ____ 
# |_ _\||_|\|| \ | _\ ||_|\|  \ | \|\  |  _\| __\| . \| \|\|  \ | \|\|  \ |   |
#   || | _ |||_|\[__ \| _ || . \|  \|  | _\ |  ]_|  <_|  \|| . \|  \|| . \| . |
#   |/ |/ |/|___/|___/|/ |/|/\_/|/\_/  |/   |___/|/\_/|/\_/|/\_/|/\_/|___/|___/
# -----| https://github.com/thushan/3dprinter-configs
#
# Last Updated: 13/08/2023
##############
# Heavily based on Cyril Guislain [@Guilouz]'s FLSun Super Racer configurations:
# https://github.com/Guilouz/Klipper-Flsun-Super-Racer
##############

[gcode_macro M204]
# https://marlinfw.org/docs/gcode/M204.html
description: Manages maximum acceleration control
rename_existing: M204.1
gcode:
  {% if 'S' in params %}
  {% set s = params.S|float %}
  SET_VELOCITY_LIMIT ACCEL={s}
  {% else %}
  {% if 'P' in params %}
  {% set p = params.P|float %}
  {% if 'T' in params %}
  {% set t = params.T|float %}
  {% if p < t %}
  SET_VELOCITY_LIMIT ACCEL={p}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={t}
  {% endif %}
  {% else %}
  SET_VELOCITY_LIMIT ACCEL={p}
  {% endif %}
  {% elif 'T' in params %}
  {% set t = params.T|float %}
  SET_VELOCITY_LIMIT ACCEL={t}
  {% endif %}
  {% endif %}

[gcode_macro M205]
# https://marlinfw.org/docs/gcode/M205.html
description: Handles speed control of right angles
gcode:
  {% if 'X' in params %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}
  
[gcode_macro M109]
description: Extruder temperature control
rename_existing: M99109
gcode:
  {% set s = params.S|float %}
  M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
  {% if s != 0 %}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}
  {% endif %}


[gcode_macro M190]
description: Tray temperature control
rename_existing: M99190
gcode:
  {% set s = params.S|float %}
  M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
  {% if s != 0 %}
  TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}
  {% endif %}


[delayed_gcode BED_MESH_INIT]
initial_duration: .01
gcode:
  BED_MESH_PROFILE LOAD=default

[gcode_macro SECURITY_OFFSET]
description: Apply a Safety Offset of 1mm
gcode:
  SET_GCODE_OFFSET Z=+1
  RESPOND MSG="Safety offset (1mm) applied!"


[gcode_macro SET_GCODE_OFFSET]
description: Z-Offset Backup
rename_existing: _SET_GCODE_OFFSET
gcode:
  {% if printer.save_variables.variables.gcode_offsets %}
  {% set offsets = printer.save_variables.variables.gcode_offsets %}
  {% else %}
  {% set offsets = {'z': None} %}
  {% endif %}
  {% set ns = namespace(offsets={'z': offsets.z}) %}
  _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
  {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
  {%if 'Z_ADJUST' in params %}
  {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
  {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
  {% endif %}
  SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
  {% if printer.save_variables.variables.gcode_offsets %}
  {% set offsets = printer.save_variables.variables.gcode_offsets %}
  _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
  { action_respond_info("Z-Offset loaded from variables.cfg file: %s" % (offsets)) }
  {% endif %}
